{
    "summary": "Evaluate string arithmetic expression",
    "question": "Implement a basic calculator to evaluate a valid expression string without using built-in functions like eval().",
    "example": "Input: s = \"1 + 1\" -> Output: 2\nInput: s = \" 2-1 + 2 \" -> Output: 3\nInput: s = \"(1+(4+5+2)-3)+(6+8)\" -> Output: 23",
    "constraint": "1 <= s.length <= 3 * 10^5. s consists of digits, '+', '-', '(', ')', and spaces. '+' is not unary. '-' may be unary inside parentheses. No consecutive operators. Result fits in signed 32-bit integer.",
    "followup": "",
    "title": "Basic Calculator",
    "leetcode_url": "https://leetcode.com/problems/Basic-Calculator/",
    "difficulty": "Hard",
    "starter_code": "\n    ```python\ndef calculate(s: str) -> int:\n    result = 0\n    sign = 1\n    num = 0\n    st = []\n    for c in s:\n        if c.isdigit():\n            num = num * 10 + int(c)\n        else:\n            result += sign * num\n            num = 0\n            if c == '+':\n                sign = 1\n            elif c == '-':\n                sign = -1\n            elif c == '(':\n                st.append(result)\n                st.append(sign)\n                result = 0\n                sign = 1\n            elif c == ')':\n                prev_sign = st.pop()\n                prev_result = st.pop()\n                result = prev_result + prev_sign * result\n    result += sign * num\n    return result\n```\n    \n    The algorithm first initializes variables `result`, `sign`, and `num` along with a stack `st`. It iterates through each character of the given string, `s`. If a digit is encountered, we update `num`, otherwise, if an operator, `(` or `)` is found, we perform the appropriate operation and update the variables accordingly. For example, we store the current result and sign onto the stack when we encounter a `(` and calculate the result when we encounter a `)` and use the stack to track the values of previous results and signs. Finally, we return the final result after the iteration is complete.\n    "
}