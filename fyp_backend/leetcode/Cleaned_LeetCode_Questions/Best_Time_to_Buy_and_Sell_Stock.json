{
    "summary": "Maximize stock trading profit",
    "question": "Given an array 'prices', where 'prices[i]' is the stock price on day i, find the maximum profit from buying and selling once, ensuring the buy occurs before the sell. Return 0 if no profit is possible.",
    "example": "Input: prices = [7,1,5,3,6,4] Output: 5 (Buy on day 2 at price 1 and sell on day 5 at price 6). Input: prices = [7,6,4,3,1] Output: 0 (No profit possible).",
    "constraint": "1 <= prices.length <= 10^5, 0 <= prices[i] <= 10^4",
    "followup": "",
    "title": "Best Time To Buy And Sell Stock",
    "leetcode_url": "https://leetcode.com/problems/Best-Time-to-Buy-and-Sell-Stock/",
    "difficulty": "Easy",
    "starter_code": "\n    ```python\ndef maxProfit(prices):\n    minPrice = float('inf')\n    maxProfit = 0\n    for price in prices:\n        minPrice = min(minPrice, price)\n        maxProfit = max(maxProfit, price - minPrice)\n    return maxProfit\n```\n    \n    The algorithm iterates through the input array of prices. We maintain two variables: `minPrice` to track the minimum price encountered up to the current day, and `maxProfit` to track maximum achievable profit. \n\nFor each day, we update:\n1. `minPrice` by comparing its value with the current day's stock price.\n2. `maxProfit` by comparing its value with the difference between the current day's stock price and the minimum stock price encountered so far.\n\nAt the end of the iteration, the algorithm returns the value stored in `maxProfit`, which is the maximum possible profit that can be achieved.\n    "
}