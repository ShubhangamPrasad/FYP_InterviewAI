{
    "summary": "Find maximum stock trading profit",
    "question": "Given an array of stock prices, find the maximum profit achievable by buying and selling the stock as many times as desired (with at most one share held at any time).",
    "example": "Input: prices = [7,1,5,3,6,4] Output: 7. Buy on day 2 (1) and sell on day 3 (5) for profit 4. Then buy on day 4 (3) and sell on day 5 (6) for profit 3. Total = 4 + 3 = 7.",
    "constraint": "1 <= prices.length <= 3000, 0 <= prices[i] <= 10000",
    "followup": "",
    "title": "Best Time To Buy And Sell Stock Ii",
    "leetcode_url": "https://leetcode.com/problems/Best-Time-to-Buy-and-Sell-Stock-II/",
    "difficulty": "Medium",
    "starter_code": "\n    ```python\ndef max_profit(prices):\n    max_profit = 0\n    for i in range(1, len(prices)):\n        if prices[i] > prices[i - 1]:\n            max_profit += prices[i] - prices[i - 1]\n    return max_profit\n```\n    \n    The algorithm loops through the given array of stock prices, starting from the second day. For each day, it checks if the price of the stock is higher than the previous day's price. If so, it calculates the difference between the two prices and adds this profit to the total maximum profit. By doing this, we are considering all the possible profitable transactions and accumulating the maximum profit we can achieve.\n\nThis approach has a runtime complexity of O(n), where n is the number of days in the input array.\n    "
}