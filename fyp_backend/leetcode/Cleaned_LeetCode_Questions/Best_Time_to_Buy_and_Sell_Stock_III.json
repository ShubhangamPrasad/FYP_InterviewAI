{
    "summary": "Max profit with two transactions",
    "question": "Find the maximum profit possible from an array of stock prices, allowing at most two transactions, and ensuring one transaction completes before starting another.",
    "example": "Input: prices = [3,3,5,0,0,3,1,4]; Output: 6. Explanation: Buy on day 4 (price=0), sell on day 6 (price=3), profit=3-0=3. Then buy on day 7 (price=1) and sell on day 8 (price=4), profit=4-1=3.",
    "constraint": "1 <= prices.length <= 10^5; 0 <= prices[i] <= 10^5",
    "followup": "",
    "title": "Best Time To Buy And Sell Stock Iii",
    "leetcode_url": "https://leetcode.com/problems/Best-Time-to-Buy-and-Sell-Stock-III/",
    "difficulty": "Hard",
    "starter_code": "\n    ```python\ndef maxProfit(prices):\n    buy1, buy2 = float(\"inf\"), float(\"inf\")\n    profit1, profit2 = 0, 0\n\n    for price in prices:\n        buy1 = min(buy1, price)\n        profit1 = max(profit1, price - buy1)\n        buy2 = min(buy2, price - profit1)\n        profit2 = max(profit2, price - buy2)\n\n    return profit2\n```\n    \n    1. Initialize variables buy1 and buy2 to track the minimum prices, and profit1 and profit2 to track the maximum profits.\n2. Iterate through prices array.\n3. Update buy1 to the minimum of buy1 and the current price.\n4. Update profit1 to the maximum of profit1 and the current price - buy1.\n5. Update buy2 to the minimum of buy2 and the current price - profit1.\n6. Update profit2 to the maximum of profit2 and the current price - buy2.\n7. Return profit2. This is the profit from two transactions.\n    "
}