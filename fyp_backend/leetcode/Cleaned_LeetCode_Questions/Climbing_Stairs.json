{
    "summary": "Find ways to climb stairs",
    "question": "Given n steps, determine the number of distinct ways to climb to the top where each step is either 1 or 2 steps.",
    "example": "Input: n = 2, Output: 2, Explanation: [1 step + 1 step, 2 steps]; Input: n = 3, Output: 3, Explanation: [1+1+1, 1+2, 2+1]",
    "constraint": "1 <= n <= 45",
    "followup": "",
    "title": "Climbing Stairs",
    "leetcode_url": "https://leetcode.com/problems/Climbing-Stairs/",
    "difficulty": "Easy",
    "starter_code": "\n    ```python\ndef climbStairs(n):\n    if n <= 2:\n        return n\n    a, b = 1, 2\n    for _ in range(3, n+1):\n        a, b = b, a + b\n    return b\n```\n\n    \n    This problem can be solved using dynamic programming. The number of ways to reach the top can be calculated by finding the sum of the ways to reach the previous two steps. We start with the base cases where `n` is 1 or 2, and then iteratively build up the solution. In each iteration, we update `a` and `b` with the new number of ways to reach steps `n-2` and `n-1` respectively, and keep calculating the number of ways to reach step `n` using `a + b`. This continues until we reach the top and return the final result.\n    "
}