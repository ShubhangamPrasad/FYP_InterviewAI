{
    "summary": "Convert sorted array to BST",
    "question": "Convert a sorted integer array into a height-balanced binary search tree where the depth of subtrees of every node differ by at most one.",
    "example": "Input: nums = [-10,-3,0,5,9] Output: [0,-3,9,-10,null,5]; Input: nums = [1,3] Output: [3,1]",
    "constraint": "1 <= nums.length <= 10^4, -10^4 <= nums[i] <= 10^4, nums is sorted in strictly increasing order.",
    "followup": "",
    "title": "Convert Sorted Array To Binary Search Tree",
    "leetcode_url": "https://leetcode.com/problems/Convert-Sorted-Array-to-Binary-Search-Tree/",
    "difficulty": "Easy",
    "starter_code": "\n    ```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef sorted_array_to_bst(nums):\n    def helper(start, end):\n        if start > end:\n            return None\n\n        mid = start + (end - start) // 2\n        node = TreeNode(nums[mid])\n        node.left = helper(start, mid - 1)\n        node.right = helper(mid + 1, end)\n\n        return node\n\n    return helper(0, len(nums) - 1)\n```\n\n    \n    The algorithm for creating a height-balanced binary search tree from a sorted array can be described as follows:\n\n1. Find the middle element of the array, and make it the root of the binary search tree.\n2. For each half of the array (elements to the left of the middle element and elements to the right of the middle element), repeat step 1 recursively.\n3. The base case is when the start index is greater than the end index, in which case a null node is returned.\n\nThe above code implements this algorithm in C++, Java, Python, and JavaScript.\n    "
}