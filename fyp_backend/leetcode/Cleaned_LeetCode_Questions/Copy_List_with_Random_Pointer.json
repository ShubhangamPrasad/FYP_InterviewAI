{
    "summary": "Deep copy linked list problem",
    "question": "Construct a deep copy of a linked list where each node has a random pointer, ensuring pointers in the copied list represent the same state as the original without referring to original nodes.",
    "example": "Input: head = [[7,null],[13,0],[11,4],[10,2],[1,0]] Output: [[7,null],[13,0],[11,4],[10,2],[1,0]]; Input: head = [[1,1],[2,1]] Output: [[1,1],[2,1]]; Input: head = [[3,null],[3,0],[3,null]] Output: [[3,null],[3,0],[3,null]]; Input: head = [] Output: []",
    "constraint": "0 <= n <= 1000; -10000 <= Node.val <= 10000; Node.random can be null or point to any node in the list.",
    "followup": "",
    "title": "Copy List With Random Pointer",
    "leetcode_url": "https://leetcode.com/problems/Copy-List-with-Random-Pointer/",
    "difficulty": "Medium"
}