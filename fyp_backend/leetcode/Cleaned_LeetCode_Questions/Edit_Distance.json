{
    "summary": "Min operations to convert strings",
    "question": "Find the minimum number of operations (insert, delete, or replace) required to transform word1 into word2.",
    "example": "Input: word1 = 'horse', word2 = 'ros' Output: 3 Explanation: horse -> rorse -> rose -> ros. Input: word1 = 'intention', word2 = 'execution' Output: 5 Explanation: intention -> inention -> enention -> exention -> exection -> execution.",
    "constraint": "0 <= word1.length, word2.length <= 500. word1 and word2 consist of lowercase English letters.",
    "followup": "",
    "title": "Edit Distance",
    "leetcode_url": "https://leetcode.com/problems/Edit-Distance/",
    "difficulty": "Hard",
    "starter_code": "\n    ```python\ndef minDistance(word1: str, word2: str) -> int:\n    m, n = len(word1), len(word2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif word1[i - 1] == word2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1\n    \n    return dp[m][n]\n```\n    \n    The algorithm used is dynamic programming. We create a 2D table dp with dimensions (m+1) x (n+1), where m is the length of word1 and n is the length of word2. Each cell dp[i][j] represents the minimum number of operations required to convert word1[0...i-1] to word2[0...j-1].\n\nFor each cell, we have the following conditions:\n1. If either i or j is 0, it means one of the strings is empty, so the minimum number of operations needed is the length of the non-empty string (i or j).\n2. If the current characters of the two strings are equal (word1[i-1] == word2[j-1]), we don't have to do anything, so dp[i][j] = dp[i-1][j-1].\n3. If the current characters are different, we take the minimum of the following and add 1:\n    a. dp[i-1][j]: Delete operation\n    b. dp[i][j-1]: Insert operation\n    c. dp[i-1][j-1]: Replace operation\n\nAfter filling the table, the minimum number of operations will be at dp[m][n].\n    "
}