{
    "summary": "Evaluate arithmetic in RPN",
    "question": "Given an array of tokens representing a valid Reverse Polish Notation (RPN) expression, evaluate its value. Valid operators are '+', '-', '*', and '/', where division follows truncation toward zero.",
    "example": "Input: tokens = [\"2\",\"1\",\"+\",\"3\",\"*\"] Output: 9 Explanation: ((2 + 1) * 3) = 9. Input: tokens = [\"4\",\"13\",\"5\",\"/\",\"+\"] Output: 6 Explanation: (4 + (13 / 5)) = 6.",
    "constraint": "1 <= tokens.length <= 10^4. tokens[i] is either an operator ('+', '-', '*', '/') or an integer in the range [-200, 200]. Division by zero is not possible.",
    "followup": "",
    "title": "Evaluate Reverse Polish Notation",
    "leetcode_url": "https://leetcode.com/problems/Evaluate-Reverse-Polish-Notation/",
    "difficulty": "Medium",
    "starter_code": "\n    ```python\ndef evalRPN(tokens):\n    stack = []\n    for token in tokens:\n        if token in {\"+\", \"-\", \"*\", \"/\"}:\n            b = stack.pop()\n            a = stack.pop()\n            if token == \"+\":\n                stack.append(a + b)\n            elif token == \"-\":\n                stack.append(a - b)\n            elif token == \"*\":\n                stack.append(a * b)\n            else:\n                stack.append(int(a / b))\n        else:\n            stack.append(int(token))\n    return stack[-1]\n```\n    \n    The algorithm for evaluating the Reverse Polish Notation (RPN) expression is based on the stack data structure. Iterate through the given tokens array, and for each token:\n\n1. If the token is an operator (+, -, *, /), pop the top two elements from the stack, apply the operation, and push the result back onto the stack.\n2. If the token is a number, push it onto the stack.\n\nAfter the loop, the top element on the stack is the final result of the evaluated RPN expression.\n\nNote that in Python and JavaScript, we need to make sure the division result is truncated toward zero using `int(a / b)` and `Math.trunc(a / b)` respectively.\n    "
}