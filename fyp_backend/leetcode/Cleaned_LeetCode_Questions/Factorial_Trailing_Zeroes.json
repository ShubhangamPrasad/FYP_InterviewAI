{
    "summary": "Count trailing zeroes in factorial",
    "question": "Given an integer n, return the number of trailing zeroes in n!.",
    "example": "Input: n = 3, Output: 0 (Explanation: 3! = 6, no trailing zero)\nInput: n = 5, Output: 1 (Explanation: 5! = 120, one trailing zero)\nInput: n = 0, Output: 0",
    "constraint": "0 <= n <= 10^4",
    "followup": "Could you write a solution that works in logarithmic time complexity?",
    "title": "Factorial Trailing Zeroes",
    "leetcode_url": "https://leetcode.com/problems/Factorial-Trailing-Zeroes/",
    "difficulty": "Medium",
    "starter_code": "\n    ```python\ndef trailing_zeroes(n: int) -> int:\n    count = 0\n    while n > 0:\n        n //= 5\n        count += n\n    return count\n```\n\n    \n    The given problem requires us to calculate the number of trailing zeroes in n! (factorial of n). Trailing zeroes are formed by the product of 2 and 5. For example, 20! has 4 trailing zeroes as there are 4 instances of 2 * 5 (10, 20, 30, and 50). We know there are plenty of even factors in a factorial, so we just need to count how many times the factor 5 appears.\n\nThe algorithm we use here is dividing n by 5 iteratively until n becomes 0. In each step, we divide n by 5 and add the quotient to the count. Finally, we return the count as the result.\n    "
}