{
    "summary": "Find range of target value",
    "question": "Given a sorted array of integers, find the starting and ending positions of a target value. Return [-1, -1] if the target is not present. Ensure the solution runs in O(log n) time complexity.",
    "example": "Input: nums = [5,7,7,8,8,10], target = 8; Output: [3,4]. Input: nums = [5,7,7,8,8,10], target = 6; Output: [-1,-1]. Input: nums = [], target = 0; Output: [-1,-1].",
    "constraint": "0 <= nums.length <= 105. -109 <= nums[i] <= 109. Array is sorted in non-decreasing order. -109 <= target <= 109.",
    "followup": "",
    "title": "Find First And Last Position Of Element In Sorted Array",
    "leetcode_url": "https://leetcode.com/problems/Find-First-and-Last-Position-of-Element-in-Sorted-Array/",
    "difficulty": "Medium",
    "starter_code": "\n    ```python\ndef searchRange(nums, target):\n    start, end = -1, -1\n    left, right = 0, len(nums) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        if nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n            if nums[mid] == target:\n                start = mid\n\n    left, right = 0, len(nums) - 1\n    \n    while left <= right:\n        mid = left + (right - left) // 2\n        if nums[mid] > target:right = mid - 1\n        else:\n            left = mid + 1\n            if nums[mid] == target:\n                end = mid\n    \n    return [start, end]\n```\n    \n    1. Initialize `start` and `end` variables to -1 as default return values.\n2. Setup `left` and `right` pointers at the beginning and end of the `nums` array.\n3. Loop until `left` is greater than `right`:\n   a. Calculate the `mid` index.\n   b. If the value at the `mid` index is smaller than `target`, move the `left` pointer to `mid + 1`.\n   c. If the value at the `mid` index is greater than or equal to `target`, move the `right` pointer to `mid - 1`. If the value at the `mid` index is equal to `target`, update `start` with `mid`.\n4. Reset `left` and `right` pointers to the beginning and end of the `nums` array.\n5. Loop again until `left` is greater than `right`:\n   a. Calculate the `mid` index.\n   b. If the value at the `mid` index is greater than `target`, move the `right` pointer to `mid - 1`.\n   c. If the value at the `mid` index is smaller than or equal to `target`, move the `left` pointer to `mid + 1`. If the value at the `mid` index is equal to `target`, update `end` with `mid`.\n6. Return the resulting `start` and `end` values as an array/list.\n    "
}