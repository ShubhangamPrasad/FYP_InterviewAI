{
    "summary": "Implement median computation class",
    "question": "Design a class MedianFinder to add integers from a data stream and compute the median of all elements added so far.",
    "example": {
        "input": [
            "MedianFinder",
            "addNum",
            "addNum",
            "findMedian",
            "addNum",
            "findMedian"
        ],
        "output": [
            null,
            null,
            null,
            1.5,
            null,
            2.0
        ],
        "explanation": [
            "MedianFinder medianFinder = new MedianFinder();",
            "medianFinder.addNum(1);    // arr = [1]",
            "medianFinder.addNum(2);    // arr = [1, 2]",
            "medianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)",
            "medianFinder.addNum(3);    // arr[1, 2, 3]",
            "medianFinder.findMedian(); // return 2.0"
        ]
    },
    "constraint": {
        "num_range": "-10^5 <= num <= 10^5",
        "data_structure_conditions": "At least one element must be present in the data structure before calling findMedian.",
        "method_calls_limit": "At most 5 * 10^4 calls will be made to addNum and findMedian."
    },
    "followup": "If all integers from the stream are in the range [0, 100] or if 99% are, how can the solution be optimized?",
    "title": "Find Median From Data Stream",
    "leetcode_url": "https://leetcode.com/problems/Find-Median-from-Data-Stream/",
    "difficulty": "Hard",
    "starter_code": "\n    ```python\nimport heapq\n\nclass MedianFinder:\n    def __init__(self):\n        self.left = []  # max heap\n        self.right = []  # min heap\n\n    def addNum(self, num: int) -> None:\n        if not self.left or num <= -self.left[0]:\n            heapq.heappush(self.left, -num)\n        else:\n            heapq.heappush(self.right, num)\n        \n        if len(self.left) < len(self.right):\n            heapq.heappush(self.left, -heapq.heappop(self.right))\n        elif len(self.left) > len(self.right) + 1:\n            heapq.heappush(self.right, -heapq.heappop(self.left))\n\n    def findMedian(self) -> float:\n        if len(self.left) == len(self.right):\n            return (-self.left[0] + self.right[0]) / 2\n        else:\n            return -self.left[0]\n```\n\n    \n    The algorithm for solving the median in a list of integers works by maintaining two heaps, a max-heap for the left half and a min-heap for the right half. When a new number is added, it is compared to the max value of the left max-heap. If the number is smaller or equal, it is added to the left heap. If the number is larger, it is added to the right min-heap. Then, we balance the two heaps by ensuring that their sizes never differ by more than one. This ensures that the median is always easily accessible as either the largest value in the left heap or the average of the largest value in the left heap and the smallest value in the right heap. The algorithm has an O(log N) time complexity, where N is the number of elements in the list.\n    "
}