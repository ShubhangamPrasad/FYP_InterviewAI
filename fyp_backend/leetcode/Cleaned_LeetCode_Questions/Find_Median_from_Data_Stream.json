{
    "summary": "Implement median computation class",
    "question": "Design a class MedianFinder to add integers from a data stream and compute the median of all elements added so far.",
    "example": {
        "input": [
            "MedianFinder",
            "addNum",
            "addNum",
            "findMedian",
            "addNum",
            "findMedian"
        ],
        "output": [
            null,
            null,
            null,
            1.5,
            null,
            2.0
        ],
        "explanation": [
            "MedianFinder medianFinder = new MedianFinder();",
            "medianFinder.addNum(1);    // arr = [1]",
            "medianFinder.addNum(2);    // arr = [1, 2]",
            "medianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)",
            "medianFinder.addNum(3);    // arr[1, 2, 3]",
            "medianFinder.findMedian(); // return 2.0"
        ]
    },
    "constraint": {
        "num_range": "-10^5 <= num <= 10^5",
        "data_structure_conditions": "At least one element must be present in the data structure before calling findMedian.",
        "method_calls_limit": "At most 5 * 10^4 calls will be made to addNum and findMedian."
    },
    "followup": "If all integers from the stream are in the range [0, 100] or if 99% are, how can the solution be optimized?",
    "title": "Find Median From Data Stream",
    "leetcode_url": "https://leetcode.com/problems/Find-Median-from-Data-Stream/",
    "difficulty": "Hard"
}