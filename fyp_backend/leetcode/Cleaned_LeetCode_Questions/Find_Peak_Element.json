{
    "summary": "Find index of peak element",
    "question": "Given an integer array nums, find a peak element that is strictly greater than its neighbors and return its index. If the array contains multiple peaks, return the index of any of the peaks. Ensure the algorithm runs in O(log n) time.",
    "example": "Input: nums = [1,2,3,1] Output: 2 (Explanation: 3 is a peak element at index 2). Input: nums = [1,2,1,3,5,6,4] Output: 5 (Explanation: Function can return either index 1 for peak 2 or index 5 for peak 6).",
    "constraint": "1 <= nums.length <= 1000, -2^31 <= nums[i] <= 2^31-1, nums[i] != nums[i+1] for all valid i. Treat nums[-1] and nums[n] as -\u221e.",
    "followup": "",
    "title": "Find Peak Element",
    "leetcode_url": "https://leetcode.com/problems/Find-Peak-Element/",
    "difficulty": "Medium",
    "starter_code": "\n    ```python\ndef findPeakElement(nums):\n    left, right = 0, len(nums) - 1\n    while left < right:\n        mid = left + (right - left) // 2\n        if nums[mid] < nums[mid + 1]:\n            left = mid + 1\n        else:\n            right = mid\n    return left\n```\n    \n    For this problem, we can use the binary search. Instead of comparing the mid-element to the target value, we compare it with its neighbors. Based on the comparison, we adjust the left and right pointers accordingly:\n\n1. Initialize left and right pointer, `left = 0` and `right = nums.length - 1`.\n2. While `left < right`, do the following:\n   a. Calculate the mid index, `mid = left + (right - left) // 2`.\n   b. If `nums[mid] < nums[mid + 1]`, move the left pointer to `mid + 1`.\n   c. Else, move the right pointer to the `mid`.\n3. When `left >= right`, the peak index is found, so return `left`.\n\nSince we use a binary search, the algorithm runs in O(log n) time.\n    "
}