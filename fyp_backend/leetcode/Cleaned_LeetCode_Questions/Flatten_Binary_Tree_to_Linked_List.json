{
    "summary": "Flatten binary tree to linked list",
    "question": "Transform a binary tree into a linked list where the right pointer represents the next node and left is always null, following pre-order traversal.",
    "example": "Input: root = [1,2,5,3,4,null,6]; Output: [1,null,2,null,3,null,4,null,5,null,6]\nInput: root = []; Output: []\nInput: root = [0]; Output: [0]",
    "constraint": "The number of nodes in the tree is in the range [0, 2000]. Node values are in the range [-100, 100].",
    "followup": "Can you flatten the tree in-place with O(1) extra space?",
    "title": "Flatten Binary Tree To Linked List",
    "leetcode_url": "https://leetcode.com/problems/Flatten-Binary-Tree-to-Linked-List/",
    "difficulty": "Medium"
}