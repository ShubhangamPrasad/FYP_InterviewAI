{
    "summary": "Insert and merge new interval",
    "question": "Given a sorted array of intervals, insert a new interval and merge overlapping intervals while maintaining sorted order.",
    "example": [
        {
            "input": "intervals = [[1,3],[6,9]], newInterval = [2,5]",
            "output": "[[1,5],[6,9]]"
        },
        {
            "input": "intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]",
            "output": "[[1,2],[3,10],[12,16]]"
        },
        {
            "input": "intervals = [], newInterval = [5,7]",
            "output": "[[5,7]]"
        },
        {
            "input": "intervals = [[1,5]], newInterval = [2,3]",
            "output": "[[1,5]]"
        },
        {
            "input": "intervals = [[1,5]], newInterval = [2,7]",
            "output": "[[1,7]]"
        }
    ],
    "constraint": [
        "0 <= intervals.length <= 10^4",
        "intervals[i].length == 2",
        "0 <= start_i <= end_i <= 10^5",
        "intervals are sorted by start_i in ascending order.",
        "newInterval.length == 2",
        "0 <= start <= end <= 10^5"
    ],
    "followup": "",
    "title": "Insert Interval",
    "leetcode_url": "https://leetcode.com/problems/Insert-Interval/",
    "difficulty": "Medium",
    "starter_code": "\n    ```python\nfrom typing import List\n\ndef insert(intervals: List[List[int]], newInterval: List[int]) -> List[List[int]]:\n    result = []\n    start_pos = 0\n\n    while start_pos < len(intervals) and intervals[start_pos][1] < newInterval[0]:\n        result.append(intervals[start_pos])\n        start_pos += 1\n\n    while start_pos < len(intervals) and intervals[start_pos][0] <= newInterval[1]:\n        newInterval[0] = min(newInterval[0], intervals[start_pos][0])\n        newInterval[1] = max(newInterval[1], intervals[start_pos][1])\n        start_pos += 1\n\n    result.append(newInterval)\n\n    while start_pos < len(intervals):\n        result.append(intervals[start_pos])\n        start_pos += 1\n\n    return result\n```\n    \n    The algorithm to merge the new interval starts by exploring the non-overlapping intervals before the new one as we are given a sorted list of intervals. We add the explored intervals that came before to the result. After that, we continue exploring intervals that overlap with the new interval and continuously merging them. We update the new interval's starting and ending points according to the merging process until no overlapping intervals remain. We add the merged interval to the result list, and finally, we add the rest of the original intervals present after the new interval. The result will be a merged list of intervals. \n    "
}