{
    "summary": "Invert a binary tree",
    "question": "Given the root of a binary tree, invert the tree and return its root.",
    "example": "Example 1: Input: root = [4,2,7,1,3,6,9] Output: [4,7,2,9,6,3,1]\nExample 2: Input: root = [2,1,3] Output: [2,3,1]\nExample 3: Input: root = [] Output: []",
    "constraint": "The number of nodes in the tree is in the range [0, 100]. Node.val values are in the range [-100, 100].",
    "followup": "",
    "title": "Invert Binary Tree",
    "leetcode_url": "https://leetcode.com/problems/Invert-Binary-Tree/",
    "difficulty": "Easy",
    "starter_code": "\n    ```python\nclass TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef invert_tree(root):\n    if root is None:\n        return None\n    root.left, root.right = invert_tree(root.right), invert_tree(root.left)\n    return root\n```\n    \n    This recursive algorithm traverses the tree in depth-first search order. At each visited node, we swap its left child with its right child. Then we apply the same process for the children.\n    "
}