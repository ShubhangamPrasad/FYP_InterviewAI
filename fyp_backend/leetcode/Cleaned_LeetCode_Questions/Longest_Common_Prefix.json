{
    "summary": "Find longest common prefix",
    "question": "Write a function to find the longest common prefix string among an array of strings. Return an empty string if no common prefix exists.",
    "example": "Input: strs = [\"flower\",\"flow\",\"flight\"] Output: \"fl\". Input: strs = [\"dog\",\"racecar\",\"car\"] Output: \"\".",
    "constraint": "1 <= strs.length <= 200, 0 <= strs[i].length <= 200, strs[i] consists of only lower-case English letters.",
    "followup": "",
    "title": "Longest Common Prefix",
    "leetcode_url": "https://leetcode.com/problems/Longest-Common-Prefix/",
    "difficulty": "Easy",
    "starter_code": "\n    ```python\ndef longest_common_prefix(strs):\n    if not strs:\n        return \"\"\n\n    for i, c in enumerate(strs[0]):\n        for j in range(1, len(strs)):\n            if i == len(strs[j]) or strs[j][i] != c:\n                return strs[0][:i]\n    return strs[0]\n```\n    \n    The algorithm iterates through the characters in the first string and compares the equivalent characters in the subsequent strings. If there is a mismatch detected, return the common prefix up to the mismatch point. If the algorithm finishes iterating over the first string, return the entire first string as the common prefix.\n\n1. Check if the input array is empty, if it is, return an empty string as there is no common prefix.\n2. Iterate through the characters of the first string.\n3. For each character, iterate through the rest of the strings in the array.\n4. Compare the current character with the corresponding character in the other strings.\n5. If there is a mismatch or if we reach the end of a string, return the common prefix substring up to the current index.\n6. If the loop reaches the end of the first string, then the whole first string is the common prefix. Return the entire first string.\n    "
}