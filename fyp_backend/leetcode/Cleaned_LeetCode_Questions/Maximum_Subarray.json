{
    "summary": "Find largest sum subarray",
    "question": "Given an integer array nums, find the contiguous subarray with the largest sum and return its sum.",
    "example": "Input: nums = [-2,1,-3,4,-1,2,1,-5,4], Output: 6. Explanation: [4,-1,2,1] has the largest sum = 6. Input: nums = [1], Output: 1. Input: nums = [5,4,-1,7,8], Output: 23.",
    "constraint": "1 <= nums.length <= 3 * 10^4, -10^5 <= nums[i] <= 10^5",
    "followup": "If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach.",
    "title": "Maximum Subarray",
    "leetcode_url": "https://leetcode.com/problems/Maximum-Subarray/",
    "difficulty": "Medium",
    "starter_code": "\n    ```python\ndef maxSubArray(nums):\n    max_sum = current_sum = nums[0]\n\n    for num in nums[1:]:\n        current_sum = max(current_sum + num, num)\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum\n```\n    \n    The algorithm uses the \"Kadane's Algorithm\" approach to find the maximum contiguous subarray sum. It iterates through the given array once and tracks the maximum sum found so far and the current sum.\n\nFor each element, we compare the sum of the current_sum with the element itself, and select the maximum of the two. This helps us to decide whether to continue the current contiguous subarray or start a new one from that element. Then, we compare the new current_sum with our global max_sum, and update max_sum if we find a larger value.\n\nIn the end, max_sum contains the largest sum of the contiguous subarray.\n\nTime complexity: O(n)\nSpace complexity: O(1)\n    "
}