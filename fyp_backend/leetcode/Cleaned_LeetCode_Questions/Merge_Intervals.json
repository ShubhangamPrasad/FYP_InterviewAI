{
    "summary": "Merge overlapping intervals",
    "question": "Given an array of intervals, merge all overlapping intervals and return an array of the non-overlapping intervals.",
    "example": "Input: intervals = [[1,3],[2,6],[8,10],[15,18]] Output: [[1,6],[8,10],[15,18]]; Input: intervals = [[1,4],[4,5]] Output: [[1,5]]",
    "constraint": "1 <= intervals.length <= 10^4; intervals[i].length == 2; 0 <= start_i <= end_i <= 10^4",
    "followup": "",
    "title": "Merge Intervals",
    "leetcode_url": "https://leetcode.com/problems/Merge-Intervals/",
    "difficulty": "Medium",
    "starter_code": "\n    ```python\ndef merge(intervals):\n    if not intervals:\n        return []\n\n    intervals.sort()\n    result = [intervals[0]]\n\n    for i in range(1, len(intervals)):\n        if result[-1][1] >= intervals[i][0]:\n            result[-1][1] = max(result[-1][1], intervals[i][1])\n        else:\n            result.append(intervals[i])\n\n    return result\n```\n    \n    The algorithm first sorts the intervals based on their start time. Then, it initializes an empty list `result` to store the merged intervals, and adds the first interval to `result`. Next, it iterates through the remaining intervals, comparing the end time of the last interval in `result` to the start time of the current interval. If they overlap (i.e., the end time of the last interval in `result` is greater than or equal to the start time of the current interval), then the end time of the last interval in `result` is updated to the maximum of its own end time and the end time of the current interval. Otherwise, the current interval is added to `result`. The process continues until all intervals have been processed, and `result` contains the merged, non-overlapping intervals covering the input intervals.\n    "
}