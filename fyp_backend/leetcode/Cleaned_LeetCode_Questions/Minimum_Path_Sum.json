{
    "summary": "Find minimum path sum in grid",
    "question": "Given an m x n grid of non-negative numbers, find the path from top-left to bottom-right that minimizes the sum of all numbers along the path. You can only move down or right at any point in time.",
    "example": "Input: grid = [[1,3,1],[1,5,1],[4,2,1]] Output: 7. Explanation: Path 1 \u2192 3 \u2192 1 \u2192 1 \u2192 1 minimizes the sum. Input: grid = [[1,2,3],[4,5,6]] Output: 12.",
    "constraint": "1 <= m, n <= 200, 0 <= grid[i][j] <= 100, m == grid.length, n == grid[i].length",
    "followup": "",
    "title": "Minimum Path Sum",
    "leetcode_url": "https://leetcode.com/problems/Minimum-Path-Sum/",
    "difficulty": "Medium",
    "starter_code": "\n    ```python\ndef minPathSum(grid):\n    m, n = len(grid), len(grid[0])\n\n    for i in range(1, m):\n        grid[i][0] += grid[i - 1][0]\n\n    for i in range(1, n):\n        grid[0][i] += grid[0][i - 1]\n\n    for i in range(1, m):\n        for j in range(1, n):\n            grid[i][j] += min(grid[i - 1][j], grid[i][j - 1])\n\n    return grid[m - 1][n - 1]\n```\n    \n    The algorithm solves the problem through dynamic programming. It creates a table and fills it by the following rules:\n1. The first element of each row will be the sum of its previous row element and its current value.\n2. The first element of each column will be the sum of its previous column element and its current value.\n3. For all other elements, find the minimum path/components from its top (i-1,j) and left (i,j-1) neighbors, and then add its current value.\n\nAt the end of the loop, the bottom right cell contains the minimum path sum from the top left corner to the bottom right corner.\n    "
}