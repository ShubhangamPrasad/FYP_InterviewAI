{
    "summary": "Remove duplicates in-place from array",
    "question": "Given a sorted integer array `nums`, remove duplicates in-place such that each unique element appears only once, and the first `k` slots hold these elements. Return `k` and modify the array using O(1) extra memory.",
    "example": "Input: nums = [1,1,2]\nOutput: k=2, nums=[1,2,_]\n\nInput: nums = [0,0,1,1,1,2,2,3,3,4]\nOutput: k=5, nums=[0,1,2,3,4,_,_,_,_,_]",
    "constraint": "0 <= nums.length <= 3 * 10^4\n-100 <= nums[i] <= 100\nArray `nums` is sorted in non-decreasing order.",
    "followup": "",
    "title": "Remove Duplicates From Sorted Array",
    "leetcode_url": "https://leetcode.com/problems/Remove-Duplicates-from-Sorted-Array/",
    "difficulty": "Easy",
    "starter_code": "\n    ```python\ndef removeDuplicates(nums):\n    if not nums: return 0\n    i = 0\n    for j in range(1, len(nums)):\n        if nums[j] != nums[i]:\n            i += 1\n            nums[i] = nums[j]\n    return i + 1\n```\n\n    \n    We use two pointers `i` and `j`. `i` starts at the first element and `j` at the second. We go through the array with `j` and compare the elements at the two pointers. If they are different, it means we found a unique element, so we move `i` to the next position and copy the value from `j` to `i`. When we finish going through the array, the length of the unique part is `i+1`.\n    "
}