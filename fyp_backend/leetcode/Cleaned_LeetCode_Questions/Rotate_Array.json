{
    "summary": "Rotate array to the right",
    "question": "Given an array of integers 'nums' and a non-negative integer 'k', rotate the array to the right by 'k' steps.",
    "example": "Input: nums = [1,2,3,4,5,6,7], k = 3, Output: [5,6,7,1,2,3,4]. Input: nums = [-1,-100,3,99], k = 2, Output: [3,99,-1,-100]",
    "constraint": "1 <= nums.length <= 10^5, -2^31 <= nums[i] <= 2^31 - 1, 0 <= k <= 10^5",
    "followup": "Try to come up with multiple solutions, including an in-place solution using O(1) extra space.",
    "title": "Rotate Array",
    "leetcode_url": "https://leetcode.com/problems/Rotate-Array/",
    "difficulty": "Medium",
    "starter_code": "\n    ```python\ndef rotate(nums, k):\n    n = len(nums)\n    k %= n\n    nums[:] = nums[-k:] + nums[:-k]\n```\n    \n    The algorithm first reverses the entire array, then reverses the first `k` elements, and finally reverses the remaining `n-k` elements where `n` is the length of the array. The reversing operation is done in-place so as not to use extra memory.\n\nThis is achieved using a `reverse` function that swaps elements at positions `start` and `end` and increment `start` and decrement `end` until `start` is greater than or equal to `end`. The `reverse` function basically reverses the elements between the given positions.\n\nIn Python, we use slicing to achieve the rotation without the explicit `reverse` function.\n    "
}