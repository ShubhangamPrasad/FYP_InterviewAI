{
    "summary": "Rotate matrix 90 degrees",
    "question": "Given an n x n 2D matrix, rotate it 90 degrees clockwise in-place without allocating another matrix.",
    "example": "Input: matrix = [[1,2,3],[4,5,6],[7,8,9]] Output: [[7,4,1],[8,5,2],[9,6,3]]; Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]] Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]",
    "constraint": "matrix.length == n, matrix[i].length == n, 1 <= n <= 20, -1000 <= matrix[i][j] <= 1000",
    "followup": "",
    "title": "Rotate Image",
    "leetcode_url": "https://leetcode.com/problems/Rotate-Image/",
    "difficulty": "Medium",
    "starter_code": "\n    ```python\ndef rotate(matrix):\n    n = len(matrix)\n    for i in range(n // 2):\n        for j in range(i, n - i - 1):\n            temp = matrix[i][j]\n            matrix[i][j] = matrix[n - j - 1][i]\n            matrix[n - j - 1][i] = matrix[n - i - 1][n - j - 1]\n            matrix[n - i - 1][n - j - 1] = matrix[j][n - i - 1]\n            matrix[j][n - i - 1] = temp\n```\n    \n    The algorithm iterates over each layer of the matrix gradually working inwards. For each element in the current layer, it performs a 4-way swap (moving elements from left -> top, bottom -> left, right -> bottom, and top -> right). This moves each element in the layer to its new position after rotation without using any additional memory. The algorithm proceeds with this strategy until it reaches the center of the matrix, ensuring that all elements are correctly rotated.\n    "
}