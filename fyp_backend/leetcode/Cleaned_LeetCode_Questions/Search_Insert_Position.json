{
    "summary": "Find or insert target index",
    "question": "Given a sorted array of distinct integers and a target value, return the index of the target if found or where it should be inserted while maintaining order. Ensure the algorithm runs in O(log n) time.",
    "example": "Input: nums = [1,3,5,6], target = 5; Output: 2\nInput: nums = [1,3,5,6], target = 2; Output: 1\nInput: nums = [1,3,5,6], target = 7; Output: 4\nInput: nums = [1,3,5,6], target = 0; Output: 0\nInput: nums = [1], target = 0; Output: 0",
    "constraint": "1 <= nums.length <= 10^4; -10^4 <= nums[i], target <= 10^4; nums contains distinct values sorted in ascending order.",
    "followup": "",
    "title": "Search Insert Position",
    "leetcode_url": "https://leetcode.com/problems/Search-Insert-Position/",
    "difficulty": "Easy",
    "starter_code": "\n    ```python\ndef searchInsert(nums, target):\n    left, right = 0, len(nums) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if nums[mid] == target:\n            return mid\n        if nums[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n```\n    \n    The given problem requires a binary search algorithm. We define two pointers, `left` and `right`, initially set to the first and last index of the array. We then enter a loop that continues as long as left is less than or equal to right. Inside the loop, we calculate the middle index, `mid`, as the average of left and right. If the value at this middle index is equal to the target value, we return the middle index. If the middle value is less than the target value, we set left to `mid + 1`, meaning we search the right half of the remaining array. If the middle value is greater than the target value, we set the right to `mid - 1`, meaning we search the left half of the remaining array. After the loop, if the target value is not found, we return the value of the left pointer, which represents the index where the target value should be inserted.\n    "
}