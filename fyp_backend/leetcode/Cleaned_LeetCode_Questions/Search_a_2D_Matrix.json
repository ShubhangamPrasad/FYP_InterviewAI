{
    "summary": "Search value in sorted matrix",
    "question": "Design an efficient algorithm to search for a target in a given m x n matrix where rows are sorted left-to-right and the first integer of each row is greater than the last integer of the previous row.",
    "example": "Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3; Output: true\nInput: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13; Output: false",
    "constraint": "m == matrix.length; n == matrix[i].length; 1 <= m, n <= 100; -10^4 <= matrix[i][j], target <= 10^4",
    "followup": "",
    "title": "Search A 2D Matrix",
    "leetcode_url": "https://leetcode.com/problems/Search-a-2D-Matrix/",
    "difficulty": "Medium",
    "starter_code": "\n    ```python\ndef searchMatrix(matrix, target):\n    m, n = len(matrix), len(matrix[0])\n    l, r = 0, m * n - 1\n\n    while l <= r:\n        mid = l + (r - l) // 2\n        mid_val = matrix[mid // n][mid % n]\n\n        if mid_val == target:\n            return True\n        elif mid_val < target:\n            l = mid + 1\n        else:\n            r = mid - 1\n\n    return False\n```\n    \n    The algorithm uses binary search on an m x n matrix.\n\nFirstly, the number of rows and columns (m and n) are computed. Then, we initialize the left and right pointers (l and r).\n\nIn each step of the binary search, we calculate the middle index (mid) and get the corresponding value (mid_val) in the matrix. To get the value in the matrix, we divide mid by n and take the remainder.\n\nWe then compare the mid_val with the target. If it is equal to the target, we return true. If it's less than the target, we move the left pointer to the next position (mid + 1). Otherwise, we move the right pointer (mid - 1).\n\nIf the search space has been fully explored and the target is not found, we return false.\n    "
}