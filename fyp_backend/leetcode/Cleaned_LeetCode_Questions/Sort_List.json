{
    "summary": "Sort linked list in ascending order",
    "question": "Given the head of a linked list, return the list sorted in ascending order. Can you achieve O(n logn) time and O(1) space complexity?",
    "example": "Example 1:\nInput: head = [4,2,1,3]\nOutput: [1,2,3,4]\nExample 2:\nInput: head = [-1,5,3,4,0]\nOutput: [-1,0,3,4,5]\nExample 3:\nInput: head = []\nOutput: []",
    "constraint": "The number of nodes in the list is in the range [0, 50000]. Node values range from -100000 to 100000.",
    "followup": "Can you sort the linked list in O(n logn) time and O(1) memory?",
    "title": "Sort List",
    "leetcode_url": "https://leetcode.com/problems/Sort-List/",
    "difficulty": "Medium",
    "starter_code": "\n    ```python\nclass ListNode:\n    def __init__(self, x):\n        self.val = x\n        self.next = None\n\ndef sortList(head):\n    if not head or not head.next:\n        return head\n\n    slow, fast = head, head.next\n    while fast and fast.next:\n        slow = slow.next\n        fast = fast.next.next\n\n    mid = slow.next\n    slow.next = None\n\n    return merge(sortList(head), sortList(mid))\n\ndef merge(left, right):\n    if not left:\n        return right\n    if not right:\n        return left\n    if left.val < right.val:\n        left.next = merge(left.next, right)\n        return left\n    else:\n        right.next = merge(left, right.next)\n        return right\n```\n\n    \n    The given problem can be solved using the merge sort algorithm. First, we find the middle of the linked list using the slow and fast pointers technique. Then, we recursively split the list into two halves until we get multiple lists containing only one node. \n\nNext, we merge these single-node lists in a sorted manner. We compare the values of the nodes and connect the nodes accordingly to return the sorted list.\n\nFinally, we combine the sorted lists back together to get the final sorted linked list.\n    "
}