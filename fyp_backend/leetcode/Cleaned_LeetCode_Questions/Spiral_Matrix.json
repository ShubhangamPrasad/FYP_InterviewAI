{
    "summary": "Return matrix elements in spiral order",
    "question": "Given a m x n matrix, return all elements of the matrix in spiral order.",
    "example": "Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]; Output: [1,2,3,6,9,8,7,4,5]. Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]; Output: [1,2,3,4,8,12,11,10,9,5,6,7]",
    "constraint": "m == matrix.length, n == matrix[i].length, 1 <= m, n <= 10, -100 <= matrix[i][j] <= 100",
    "followup": "",
    "title": "Spiral Matrix",
    "leetcode_url": "https://leetcode.com/problems/Spiral-Matrix/",
    "difficulty": "Medium",
    "starter_code": "\n    ```python\ndef spiralOrder(matrix):\n    result = []\n    if not matrix: return result\n    m, n = len(matrix), len(matrix[0])\n    rowStart, colStart, rowEnd, colEnd = 0, 0, m - 1, n - 1\n\n    while rowStart <= rowEnd and colStart <= colEnd:\n        for i in range(colStart, colEnd + 1): \n            result.append(matrix[rowStart][i])\n        rowStart += 1\n        \n        for i in range(rowStart, rowEnd + 1): \n            result.append(matrix[i][colEnd]) \n        colEnd -= 1\n        \n        if rowStart <= rowEnd:\n            for i in range(colEnd, colStart - 1, -1): \n                result.append(matrix[rowEnd][i]) \n        rowEnd -= 1\n        \n        if colStart <= colEnd:\n            for i in range(rowEnd, rowStart - 1, -1): \n                result.append(matrix[i][colStart]) \n        colStart += 1\n        \n    return result\n```\n    \n    The algorithm iterates over the matrix in a spiral order. Initialize the indices to keep track of the matrix boundaries. The algorithm goes from left to right, from top to bottom, from right to left, and then from bottom to top. With each iteration, update the matrix boundaries. The process continues until the row and column boundaries cross each other.\n    "
}