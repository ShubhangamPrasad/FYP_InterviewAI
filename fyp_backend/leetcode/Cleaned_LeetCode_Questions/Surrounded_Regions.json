{
    "summary": "Capture surrounded regions in matrix",
    "question": "Given an m x n matrix with 'X' and 'O', flip all 'O's to 'X's in regions surrounded by 'X' (not connected to the border).",
    "example": "Input: board = [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"O\",\"X\"],[\"X\",\"X\",\"O\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]\nOutput: [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]",
    "constraint": "1 <= m, n <= 200; board[i][j] is 'X' or 'O'; border-connected 'O's are not flipped.",
    "followup": "",
    "title": "Surrounded Regions",
    "leetcode_url": "https://leetcode.com/problems/Surrounded-Regions/",
    "difficulty": "Medium",
    "starter_code": "\n    ```python\nclass Solution:\n    def solve(self, board: List[List[str]]) -> None:\n        if not board:\n            return\n        m, n = len(board), len(board[0])\n\n        def dfs(x, y):\n            if x < 0 or x >= m or y < 0 or y >= n or board[x][y] != 'O':\n                return\n            board[x][y] = '#'\n            dfs(x - 1, y)\n            dfs(x + 1, y)\n            dfs(x, y - 1)\n            dfs(x, y + 1)\n\n        for i in range(m):\n            dfs(i, 0)\n            dfs(i, n - 1)\n        for i in range(n):\n            dfs(0, i)\n            dfs(m - 1, i)\n\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == '#':\n                    board[i][j] = 'O'\n                elif board[i][j] == 'O':\n                    board[i][j] = 'X'\n```\n    \n    1. Use DFS to find all 'O's next to the border and mark them with a temporary marker '#'.\n2. Replace all remaining 'O's with 'X's.\n3. Replace all '#'s back to 'O's.\n    "
}