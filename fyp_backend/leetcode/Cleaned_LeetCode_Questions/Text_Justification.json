{
    "summary": "Text justification problem",
    "question": "Format an array of strings such that each line has exactly maxWidth characters with left-right justification where extra spaces are evenly distributed, except for the last line which should be left-justified.",
    "example": "Input: words = [\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"], maxWidth = 16; Output: [\"This    is    an\", \"example  of text\", \"justification.  \"]; Input: words = [\"Science\",\"is\",\"what\",\"we\",\"understand\",\"well\",\"enough\",\"to\",\"explain\",\"to\",\"a\",\"computer.\",\"Art\",\"is\",\"everything\",\"else\",\"we\",\"do\"], maxWidth = 20; Output: [\"Science  is  what we\", \"understand      well\", \"enough to explain to\", \"a  computer.  Art is\", \"everything  else  we\", \"do                  \"]",
    "constraint": "1 <= words.length <= 300; 1 <= words[i].length <= 20; words[i] consists of only English letters and symbols; 1 <= maxWidth <= 100; words[i].length <= maxWidth",
    "followup": "",
    "title": "Text Justification",
    "leetcode_url": "https://leetcode.com/problems/Text-Justification/",
    "difficulty": "Hard",
    "starter_code": "\n    ```python\ndef fullJustify(words, maxWidth):\n    result = []\n    idx = 0\n    while idx < len(words):\n        total_chars = len(words[idx])\n        last = idx + 1\n        while last < len(words):\n            if total_chars + 1 + len(words[last]) > maxWidth:\n                break\n            total_chars += 1 + len(words[last])\n            last += 1\n        gaps = last - idx - 1\n        line = []\n        if last == len(words) or gaps == 0:\n            for i in range(idx, last):\n                line.append(words[i])\n                if i < last - 1:\n                    line.append(\" \")\n            while sum(len(w) for w in line) < maxWidth:\n                line.append(\" \")\n        else:\n            even_spaces = (maxWidth - total_chars) // gaps\n            extra_spaces = (maxWidth - total_chars) % gaps\n            for i in range(idx, last):\n                line.append(words[i])\n                if i < last - 1:\n                    line.append(\" \" * (even_spaces + (1 if i - idx < extra_spaces else 0)))\n        idx = last\n        result.append(\"\".join(line))\n    return result\n```\n    \n    The algorithm works as follows:\n1. Initialize an empty result list.\n2. Use `idx` to keep track of the start of the line. `idx` initially starts at 0, i.e., the first word.\n3. Calculate the total number of characters from `idx` to the last word in a line by testing whether adding the next word, with an extra space before it, would exceed `maxWidth`.\n4. Find the number of gaps in the current line. If it is the last line or there is only one word, left-justify the words and pad the remaining space with spaces.\n5. If it's not the last line, distribute spaces as evenly as possible between words: calculate `evenSpaces` and `extraSpaces`, and add an extra space to the left gaps until there are no more `extraSpaces`.\n6. Append the constructed line to the result list and update the `idx` to the start of the next line.\n7. Repeat steps 3 to 6 until reaching the last word.\n8. Return the result list.\n    "
}