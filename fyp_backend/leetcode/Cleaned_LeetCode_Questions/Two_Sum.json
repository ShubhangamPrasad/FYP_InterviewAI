{
    "summary": "Find indices adding to target",
    "question": "Given an array of integers nums and a target integer, return indices of two numbers from nums such that they add up to the target. Each input has exactly one solution, and elements cannot be reused. Return indices in any order.",
    "example": "Example 1: Input: nums = [2,7,11,15], target = 9. Output: [0,1]. Because nums[0] + nums[1] == 9, we return [0, 1]. Example 2: Input: nums = [3,2,4], target = 6. Output: [1,2]. Example 3: Input: nums = [3,3], target = 6. Output: [0,1].",
    "constraint": "2 <= nums.length <= 10^4, -10^9 <= nums[i] <= 10^9, -10^9 <= target <= 10^9, only one valid solution exists.",
    "followup": "Can you design an algorithm with less than O(n^2) time complexity?",
    "title": "Two Sum",
    "leetcode_url": "https://leetcode.com/problems/Two-Sum/",
    "difficulty": "Easy",
    "starter_code": "\n    ```python\ndef twoSum(nums, target):\n    map = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in map:\n            return [map[complement], i]\n        map[num] = i\n    return []\n```\n    \n    The algorithm leverages a hash map (unordered_map in C++, HashMap in Java, dictionary in Python, and Map in JavaScript). It iterates through the given 'nums' array and calculates the complementary value (target - current value). If the complementary value is already in the hash map, it means that we found a solution, and we return those indices. If the complement is not in the hash map, we store the current element in the hash map with its index. If the algorithm doesn't find the solution, it returns an empty array or throws an exception (in Java).\n\nThis approach has a time complexity of O(n) and a space complexity of O(n) as well.\n    "
}