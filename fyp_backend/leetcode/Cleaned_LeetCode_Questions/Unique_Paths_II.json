{
    "summary": "Count unique paths in grid",
    "question": "How many unique paths are there from the top-left to the bottom-right corner of an m x n grid, considering obstacles represented as 1?",
    "example": "Input: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]] Output: 2; Input: obstacleGrid = [[0,1],[0,0]] Output: 1",
    "constraint": "1 <= m, n <= 100; obstacleGrid[i][j] is either 0 or 1",
    "followup": "",
    "title": "Unique Paths Ii",
    "leetcode_url": "https://leetcode.com/problems/Unique-Paths-II/",
    "difficulty": "Medium",
    "starter_code": "\n    ```python\ndef uniquePathsWithObstacles(grid):\n    m, n = len(grid), len(grid[0])\n    if grid[0][0] == 1:\n        return 0\n\n    grid[0][0] = 1\n    for i in range(1, m):\n        grid[i][0] = 1 if grid[i][0] == 0 and grid[i - 1][0] == 1 else 0\n    for i in range(1, n):\n        grid[0][i] = 1 if grid[0][i] == 0 and grid[0][i - 1] == 1 else 0\n\n    for i in range(1, m):\n        for j in range(1, n):\n            if grid[i][j] == 0:\n                grid[i][j] = grid[i - 1][j] + grid[i][j - 1]\n            else:\n                grid[i][j] = 0\n\n    return grid[m - 1][n - 1]\n```\n    \n    1. If the starting point has an obstacle, return 0 as there is no valid path.\n2. Initialize the first cell of the grid as 1 and process the first row and column,\n   setting their values to 1 if the cell is not an obstacle and if the previous cell is not an obstacle.\n3. Iterate through the grid starting from the second row and column, and for each cell, if it's not an obstacle, set its value to the sum of the values of the cells above it and to its left.\n4. Return the value of the bottom-right corner of the grid, which is the number of unique paths.\n    "
}