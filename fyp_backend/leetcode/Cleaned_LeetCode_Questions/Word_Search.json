{
    "summary": "Check word existence in grid",
    "question": "Given an m x n grid 'board' of characters and a string 'word', determine if the 'word' can be formed by sequentially adjacent characters in the grid (horizontally or vertically). Each letter cell can be used only once.",
    "example": "Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\"; Output: true. Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\"; Output: true. Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCB\"; Output: false.",
    "constraint": "1 <= m, n <= 6; 1 <= word.length <= 15; 'board' and 'word' consist of only lowercase and uppercase English letters.",
    "followup": "Could you use search pruning to make your solution faster with a larger grid?",
    "title": "Word Search",
    "leetcode_url": "https://leetcode.com/problems/Word-Search/",
    "difficulty": "Medium",
    "starter_code": "\n    ```python\ndef exist(board, word):\n    m, n = len(board), len(board[0])\n\n    def dfs(i, j, k):\n        if not 0 <= i < m or not 0 <= j < n or board[i][j] != word[k]:\n            return False\n        if k == len(word) - 1:\n            return True\n\n        tmp, board[i][j] = board[i][j], '/'\n        res = dfs(i + 1, j, k + 1) or dfs(i - 1, j, k + 1) or dfs(i, j + 1, k + 1) or dfs(i, j - 1, k + 1)\n        board[i][j] = tmp\n        return res\n\n    for i in range(m):\n        for j in range(n):\n            if dfs(i, j, 0):\n                return True\n    return False\n```\n\n    \n    For each of the implementation above, we use a Depth-First Search (DFS) based algorithm to traverse the grid board. The DFS function takes the current cell index i and j and the index of the character in the input word that we are looking for (k).\n\nThe base cases are:\n- If the cell indexes i or j are out of boundaries, or the board[i][j] character does not match word[k], return false.\n- If k (current character index) is equal to word.length - 1, we find the word in the grid, so return true.\n\nFor each cell, we run the DFS function with the given input parameters. If DFS returns true (found the word), the whole function will return true.\n    "
}