{
    "summary": "Find words on a board",
    "question": "Given a board of characters and a list of words, find all words that can be formed by sequentially adjacent cells on the board.",
    "example": "Input: board = [[\"o\",\"a\",\"a\",\"n\"],[\"e\",\"t\",\"a\",\"e\"],[\"i\",\"h\",\"k\",\"r\"],[\"i\",\"f\",\"l\",\"v\"]], words = [\"oath\",\"pea\",\"eat\",\"rain\"] | Output: [\"eat\",\"oath\"]; Input: board = [[\"a\",\"b\"],[\"c\",\"d\"]], words = [\"abcb\"] | Output: []",
    "constraint": "1 <= m, n <= 12; board[i][j] is a lowercase English letter; 1 <= words.length <= 3 * 10^4; 1 <= words[i].length <= 10; All strings in words are unique.",
    "followup": "",
    "title": "Word Search Ii",
    "leetcode_url": "https://leetcode.com/problems/Word-Search-II/",
    "difficulty": "Hard",
    "starter_code": "\n    ```python\ndef findWords(board, words):\n    def dfs(board, word, index, i, j, visited):\n        if index == len(word):\n            return True\n        if i < 0 or j < 0 or i >= len(board) or j >= len(board[0]) or visited[i][j] or board[i][j] != word[index]:\n            return False\n        visited[i][j] = True\n        found = dfs(board, word, index + 1, i - 1, j, visited) or \\\n                dfs(board, word, index + 1, i + 1, j, visited) or \\\n                dfs(board, word, index + 1, i, j - 1, visited) or \\\n                dfs(board, word, index + 1, i, j + 1, visited)\n        visited[i][j] = False\n        return found\n\n    res = []\n    for word in words:\n        if any(dfs(board, word, 0, i, j, [[False] * len(board[0]) for _ in range(len(board))])\n               for i in range(len(board)) for j in range(len(board[0]))):\n            res.append(word)\n    return res\n```\n\n    \n    The algorithm uses Depth First Search (DFS) to search for each word in the board. For each word, we iterate through all the cells in the board and start the DFS search if the current cell matches the word's first letter. During the DFS search, we mark the cell as visited and only continue the search if the next cell we are going to move to is not yet visited, in the allowed board bounds, and it matches the next character of the word. If we reached the end of the word, then we know that this word is found in the board.\n\nFor each programming language, we implemented the `findWords` function that takes the `board` and the `words` as an input and returns a list of found words. The core algorithm is the same, but the language-specific syntax and constructs are used accordingly.\n    "
}